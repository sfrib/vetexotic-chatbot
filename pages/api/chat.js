import fs from 'fs';
import path from 'path';

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const { message, history = [] } = req.body;

  // ‚ú≥Ô∏è 1. Ukl√°d√°n√≠ nov√Ωch znalost√≠ p≈ôes p≈ô√≠kaz **internƒõ//
  if (message.startsWith("**internƒõ//")) {
    const newKnowledge = message.replace("**internƒõ//", "").trim();
    const filePath = path.resolve(process.cwd(), 'knowledge.json');

    try {
      const existing = fs.existsSync(filePath)
        ? JSON.parse(fs.readFileSync(filePath, "utf-8"))
        : [];

      existing.push({
        content: newKnowledge,
        addedAt: new Date().toISOString(),
      });

      fs.writeFileSync(filePath, JSON.stringify(existing, null, 2), "utf-8");

      return res.status(200).json({ reply: "‚úÖ Nov√° znalost byla ulo≈æena do intern√≠ datab√°ze." });
    } catch (err) {
      return res.status(500).json({ error: "‚ùå Chyba p≈ôi ukl√°d√°n√≠ znalosti." });
    }
  }

  // ‚ú≥Ô∏è 2. Naƒç√≠t√°n√≠ znalost√≠ z datab√°ze knowledge.json
  const filePath = path.resolve(process.cwd(), 'knowledge.json');
  let dynamicKnowledgeText = "";

  try {
    if (fs.existsSync(filePath)) {
      const knowledgeData = JSON.parse(fs.readFileSync(filePath, "utf-8"));
      dynamicKnowledgeText = knowledgeData.map((item, i) => `‚Ä¢ ${item.content}`).join("\n");
    }
  } catch (err) {
    console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ knowledge.json:", err);
  }

  // ‚ú≥Ô∏è 3. Prompty
  const systemPrompt = {
    role: "system",
    content: `
Jsi Alfonso, virtu√°ln√≠ veterin√°rn√≠ asistent kliniky VetExotic. Specializuje≈° se na exotick√° zv√≠≈ôata: papou≈°ky, plazy, ≈æelvy, legu√°ny, hady, drobn√© savce (fretky, kr√°l√≠ky, je≈æky).

üß† Znalosti ƒçerp√°≈° z nejlep≈°√≠ veterin√°rn√≠ praxe a ≈°piƒçkov√Ωch chovatelsk√Ωch zku≈°enost√≠. C√≠lem je chr√°nit ≈æivot zv√≠≈ôat a pomoci majitel≈Øm.

üîç Pokud je stav v√°≈æn√Ω, vysvƒõtli riziko, doporuƒç kontakt na kliniku a varuj p≈ôed odkladem.

üö´ Nikdy ned√°vej rady pro psy, koƒçky nebo lidi. Nepi≈° o lidsk√Ωch l√©c√≠ch nebo ƒçaj√≠ch.

üìÜ Pokud je pot≈ôeba, nab√≠dni pohotovostn√≠ linku nebo objedn√°n√≠.

üí¨ Odpov√≠dej p≈ô√°telsky a klidnƒõ. Pom√°hej logicky a jasnƒõ.
`
  };

  const knowledgeExamples = {
    role: "user",
    content: `üìå P≈ô√≠klady situac√≠:

1. Papou≈°ek zvrac√≠ a je nafoukl√Ω ‚Üí mo≈æn√° dilatace vol√°tka. Nal√©hav√©.
2. Fretka apatick√° a studen√° ‚Üí mo≈æn√° hypoglykemie. Nutn√° urgentn√≠ pomoc.
3. ≈Ωelva neotv√≠r√° oƒçi, nej√≠ ‚Üí mo≈æn√° avitamin√≥za nebo infekce. Nutn√° kontrola.
4. Legu√°n m√° natekl√© konƒçetiny ‚Üí metabolick√° choroba kost√≠.
5. Papou≈°ek si vytrh√°v√° pe≈ô√≠ ‚Üí stres, bolest nebo parazit√©.
6. Had ne≈æere t√Ωdny ‚Üí ≈°patn√© podm√≠nky nebo nemoc.
7. Kr√°l√≠k p≈ôestal ≈ær√°t ‚Üí stasis, torze, akutn√≠ riziko.

Dal≈°√≠ znalosti:
${dynamicKnowledgeText}
`
  };

  const messages = [
    systemPrompt,
    knowledgeExamples,
    ...history.map((msg) => ({ role: msg.role, content: msg.content })),
    { role: "user", content: message },
  ];

  try {
    const completion = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.5,
      }),
    });

    const data = await completion.json();

    if (completion.ok) {
      res.status(200).json({ reply: data.choices[0].message.content });
    } else {
      res.status(500).json({ error: data.error.message || "Chyba p≈ôi z√≠sk√°v√°n√≠ odpovƒõdi." });
    }
  } catch (error) {
    res.status(500).json({ error: error.message || "Chyba serveru." });
  }
}
